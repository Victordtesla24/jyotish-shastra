
> test
> jest --verbose

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    Debug generateRelationshipRecommendations:

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1092:17)

  console.log
      - section3 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1093:17)

  console.log
      - section3.houses exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1094:17)

  console.log
      - house7 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1095:17)

  console.log
      - section6 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1096:17)

  console.log
      - navamsaAnalysis exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1097:17)

  console.log
      - house7 has analysis: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1100:19)

  console.log
      - house7 has recommendations: false

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1101:19)

  console.log
      - house7.analysis has recommendations: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1102:19)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    Debug generateRelationshipRecommendations:

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1092:17)

  console.log
      - section3 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1093:17)

  console.log
      - section3.houses exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1094:17)

  console.log
      - house7 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1095:17)

  console.log
      - section6 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1096:17)

  console.log
      - navamsaAnalysis exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1097:17)

  console.log
      - house7 has analysis: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1100:19)

  console.log
      - house7 has recommendations: false

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1101:19)

  console.log
      - house7.analysis has recommendations: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1102:19)

  console.log
    Analysis completed successfully

      at log (src/api/routes/comprehensiveAnalysis.js:119:19)

PASS tests/system/chart_and_analysis_pipeline.test.js
  System Test: Chart and Analysis Pipeline
    ‚úì should process birth data through to a complete analysis report (30 ms)
    ‚úì should handle invalid birth data at the start of the pipeline (29 ms)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-10-24T00:00:00.000Z",
      "timeOfBirth": "14:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata",
      "gender": "male"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 301.08262639990846,
        sign: 'Aquarius',
        signId: 11,
        signIndex: 10,
        degree: 1.082626399908463
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 180,
        sign: 'Libra',
        signId: 7,
        degree: 0,
        rasiSign: 'Aquarius',
        rasiSignId: 11
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Rahu',
      currentDasha: {
        planet: 'Saturn',
        startAge: 34,
        endAge: 53,
        period: 19,
        remainingYears: 12.982225981285012
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:25.375Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

PASS tests/integration/real-api-integration.test.js
  Real API Integration Tests
    ‚úì Backend server should be running and healthy (21 ms)
    ‚úì Comprehensive analysis API should return real data (76 ms)
    ‚úì Chart generation API should return real calculations (21 ms)
    ‚úì API should handle invalid data correctly (4 ms)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

  console.log
    ‚úÖ UIDataSaver: Browser event listeners initialized

      at UIDataSaver.log [as initializeBrowserEvents] (client/src/components/forms/UIDataSaver.js:636:13)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

PASS tests/unit/BirthTimeRectification.test.js
  BirthTimeRectificationService
    Validation
      ‚úì should validate birth data correctly (14 ms)
      ‚úì should generate time candidates correctly (1 ms)
    Praanapada Method
      ‚úì should calculate Praanapada correctly
      ‚úì should calculate ascendant alignment correctly (2 ms)
      ‚úì should perform Praanapada analysis (2 ms)
    Moon Method
      ‚úì should calculate Moon-Ascendant relationship
      ‚úì should test trine relationships correctly (1 ms)
      ‚úì should test quadrant relationships correctly
    Gulika Method
      ‚úì should calculate Gulika relationship (1 ms)
    Event Correlation
      ‚úì should classify event types correctly
      ‚úì should calculate planetary house lordships
      ‚úì should score house signification
    Result Synthesis
      ‚úì should synthesize results correctly (1 ms)
      ‚úì should calculate confidence correctly
      ‚úì should handle empty candidates correctly (1 ms)
    Error Handling
      ‚úì should handle missing birth data gracefully
      ‚úì should handle missing place of birth (4 ms)
    Helper Methods
      ‚úì should convert longitude to sign correctly (2 ms)
      ‚úì should get sign indices correctly (6 ms)
      ‚úì should calculate time differences correctly (1 ms)
      ‚úì should generate recommendations appropriately (2 ms)
    Integration Tests
      ‚úì should perform complete rectification analysis (3 ms)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

PASS tests/unit/calculations/HouseLordCalculator.test.js
  HouseLordCalculator
    ‚úì should get all house lords for a chart (1 ms)
    For Aries Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2 (1 ms)
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11 (1 ms)
      ‚úì should correctly determine the lord of house 12
    For Taurus Ascendant
      ‚úì should correctly determine the lord of house 1 (1 ms)
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7 (1 ms)
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12
    For Gemini Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7 (2 ms)
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11 (1 ms)
      ‚úì should correctly determine the lord of house 12
    For Cancer Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12 (4 ms)
    For Leo Ascendant
      ‚úì should correctly determine the lord of house 1 (1 ms)
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7 (1 ms)
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9 (1 ms)
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12
    For Virgo Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9
      ‚úì should correctly determine the lord of house 10 (1 ms)
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12
    For Libra Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6 (1 ms)
      ‚úì should correctly determine the lord of house 7
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12
    For Scorpio Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2 (1 ms)
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12 (1 ms)
    For Sagittarius Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9 (1 ms)
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12
    For Capricorn Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7
      ‚úì should correctly determine the lord of house 8 (1 ms)
      ‚úì should correctly determine the lord of house 9
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12
    For Aquarius Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12
    For Pisces Ascendant
      ‚úì should correctly determine the lord of house 1
      ‚úì should correctly determine the lord of house 2
      ‚úì should correctly determine the lord of house 3
      ‚úì should correctly determine the lord of house 4
      ‚úì should correctly determine the lord of house 5
      ‚úì should correctly determine the lord of house 6
      ‚úì should correctly determine the lord of house 7
      ‚úì should correctly determine the lord of house 8
      ‚úì should correctly determine the lord of house 9 (1 ms)
      ‚úì should correctly determine the lord of house 10
      ‚úì should correctly determine the lord of house 11
      ‚úì should correctly determine the lord of house 12

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    Debug generateRelationshipRecommendations:

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1092:17)

  console.log
      - section3 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1093:17)

  console.log
      - section3.houses exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1094:17)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
      - house7 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1095:17)

  console.log
      - section6 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1096:17)

  console.log
      - navamsaAnalysis exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1097:17)

  console.log
      - house7 has analysis: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1100:19)

  console.log
      - house7 has recommendations: false

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1101:19)

  console.log
      - house7.analysis has recommendations: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1102:19)

  console.log
    Analysis completed successfully

      at log (src/api/routes/comprehensiveAnalysis.js:119:19)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

PASS tests/system/api-contracts.test.js
  API Contract Preservation
    POST /api/v1/rectification/analyze - EXISTING ENDPOINT
      ‚úì should maintain exact same response structure (123 ms)
      ‚úì should preserve original error handling (5 ms)
    POST /api/v1/rectification/quick - EXISTING ENDPOINT
      ‚úì should preserve original behavior exactly (4 ms)
    POST /api/v1/rectification/with-events - EXISTING ENDPOINT
      ‚úì should maintain original event correlation structure (66 ms)
    POST /api/v1/rectification/methods - EXISTING ENDPOINT
      ‚úì should preserve original method descriptions (1 ms)
    GET /api/v1/rectification/test - EXISTING ENDPOINT
      ‚úì should preserve original health check response (1 ms)

PASS tests/integration/api/analysis_api.test.js
  Analysis API Integration Tests
    POST /api/analysis/lagna
      ‚úì should return a detailed analysis of the Lagna (62 ms)
    POST /api/analysis/houses
      ‚úì should return a comprehensive analysis of all 12 houses (6 ms)
    POST /api/analysis/dasha
      ‚úì should return the Vimshottari Dasha timeline (6 ms)
    POST /api/analysis/comprehensive
      ‚úì should return a full, orchestrated analysis report (48 ms)
      ‚úì should return a 400 error if the birth data is missing (4 ms)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

PASS tests/unit/LagnaLordAnalyzer.test.js
  LagnaLordAnalyzer
    ‚úì should correctly analyze the Lagna Lord for an Aries ascendant (1 ms)
    ‚úì should throw an error if the Lagna Lord is not found
    Basic Lagna Lord Identification
      ‚úì should correctly identify Lagna lord for all 12 signs (2 ms)
      ‚úì should find planet position correctly in chart
      ‚úì should return undefined for non-existent planet
    Complete Lagna Lord Analysis
      ‚úì should provide comprehensive analysis for Cancer Lagna (1 ms)
      ‚úì should analyze all core components
      ‚úì should handle error cases gracefully (14 ms)
    Dignity Analysis
      ‚úì should correctly identify exalted Lagna lord
      ‚úì should correctly identify debilitated Lagna lord
      ‚úì should identify own sign placement (1 ms)
      ‚úì should detect Neecha Bhanga Yoga
      ‚úì should classify friendly and enemy sign placements
    House Effects Analysis
      ‚úì should analyze effects for each house (1-12) (2 ms)
      ‚úì should provide appropriate strength for Kendra houses
      ‚úì should identify challenging Dusthana house placements
      ‚úì should provide detailed house significations (1 ms)
    Conjunction Analysis
      ‚úì should detect close conjunctions correctly
      ‚úì should calculate conjunction strength based on orb
      ‚úì should analyze planetary conjunction effects correctly
    Aspect Analysis
      ‚úì should find all aspecting planets correctly
      ‚úì should calculate aspect strength accurately
      ‚úì should determine aspect nature correctly (1 ms)
      ‚úì should provide complete aspect analysis
    Life Effects Analysis
      ‚úì should analyze all life areas comprehensively
      ‚úì should provide specific personality effects
      ‚úì should analyze health implications correctly
      ‚úì should provide career guidance (1 ms)
    Dasha Effects Analysis
      ‚úì should analyze Mahadasha effects
      ‚úì should provide appropriate Mahadasha predictions
      ‚úì should calculate Dasha timing correctly
    Remedial Measures
      ‚úì should provide comprehensive remedial measures
      ‚úì should provide planet-specific gemstone remedies (1 ms)
      ‚úì should provide appropriate mantras for each planet
      ‚úì should suggest appropriate charity and fasting (1 ms)
    Advanced Analysis Features
      ‚úì should check for Parivartana Yoga
      ‚úì should analyze special degrees like Gandanta
      ‚úì should check Pushkara Bhaga degrees
      ‚úì should calculate Navamsa placement
    Comprehensive Integration Tests
      ‚úì should provide complete analysis for different Lagna types (2 ms)
      ‚úì should generate meaningful summary and recommendations
      ‚úì should maintain consistency across multiple calls
    Performance and Reliability
      ‚úì should complete analysis within reasonable time
      ‚úì should handle edge cases gracefully

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685242192058
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:25.805Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    Debug generateRelationshipRecommendations:

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1092:17)

  console.log
      - section3 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1093:17)

  console.log
      - section3.houses exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1094:17)

  console.log
      - house7 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1095:17)

  console.log
      - section6 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1096:17)

  console.log
      - navamsaAnalysis exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1097:17)

  console.log
      - house7 has analysis: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1100:19)

  console.log
      - house7 has recommendations: false

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1101:19)

  console.log
      - house7.analysis has recommendations: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1102:19)

  console.log
    Analysis completed successfully

      at log (src/api/routes/comprehensiveAnalysis.js:119:19)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata",
      "name": "Optional Name"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    Debug generateRelationshipRecommendations:

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1092:17)

PASS tests/integration/api/rectification_api.test.js
  Rectification API Integration
    ‚úì GET /api/v1/rectification/test should return health (27 ms)
    ‚úì POST /api/v1/rectification/methods should return methods (21 ms)
    ‚úì POST /api/v1/rectification/quick should validate with production checks (24 ms)
    ‚úì POST /api/v1/rectification/analyze should perform rectification (76 ms)
    ‚úì POST /api/v1/rectification/with-events should correlate events (88 ms)

  console.log
      - section3 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1093:17)

  console.log
      - section3.houses exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1094:17)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716852414632257
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
      - house7 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1095:17)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
      - section6 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1096:17)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:25.825Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
      - navamsaAnalysis exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1097:17)

  console.log
      - house7 has analysis: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1100:19)

  console.log
      - house7 has recommendations: false

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1101:19)

  console.log
      - house7.analysis has recommendations: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1102:19)

  console.log
    Analysis completed successfully

      at log (src/api/routes/comprehensiveAnalysis.js:119:19)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    Validation result: {
      isValid: true,
      errors: [],
      validatedData: {
        dateOfBirth: '1990-01-01',
        timeOfBirth: '12:00',
        name: 'Test User',
        placeOfBirth: 'Mumbai, India',
        latitude: 19.054999,
        longitude: 72.8692035,
        timezone: 'Asia/Kolkata',
        gender: 'male'
      }
    }

      at Object.log (tests/integration/ui-api-flow.test.js:29:13)

  console.log
    Formatted data: {
      apiRequest: {
        dateOfBirth: '1990-01-01',
        timeOfBirth: '12:00',
        name: 'Test User',
        latitude: 19.054999,
        longitude: 72.8692035,
        timezone: 'Asia/Kolkata',
        placeOfBirth: 'Mumbai, India',
        gender: 'male',
        formatted: true
      },
      formatted: true,
      endpointType: 'analysis'
    }

      at Object.log (tests/integration/ui-api-flow.test.js:36:13)

  console.log
    Validation errors: [
      'Please enter a valid birth date',
      'Please enter a valid birth time (HH:MM format)',
      'Location is required - provide either coordinates or place name'
    ]

      at Object.log (tests/integration/ui-api-flow.test.js:49:13)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

PASS tests/integration/ui-api-flow.test.js
  UI to API Data Flow Integration
    ‚úì validates and formats birth data correctly (2 ms)
    ‚úì handles validation errors correctly (1 ms)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "placeOfBirth": {
        "name": "Pune, Maharashtra, India",
        "latitude": 18.5204,
        "longitude": 73.8567,
        "timezone": "Asia/Kolkata"
      },
      "latitude": 18.5204,
      "longitude": 73.8567
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, Maharashtra, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685241114662
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:25.835Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

PASS tests/unit/core/analysis/dashas/DashaAnalysisService.test.js
  DetailedDashaAnalysisService
    calculateVimshottariDasha
      ‚úì should calculate the Vimshottari Dasha sequence correctly for a given birth chart (1 ms)
    determineCurrentDasha
      ‚úì should accurately determine the current Mahadasha and Antardasha
    generateDashaTimeline
      ‚úì should generate a complete and accurate Dasha timeline (1 ms)
    Dasha Calculations for a Different Lagna
      ‚úì should correctly identify the starting Dasha lord (1 ms)

PASS tests/unit/api/ChartController.test.js
  ChartController
    ‚úì should exist and be a valid module

PASS tests/unit/services/analysis/DetailedDashaAnalysisService.test.js
  DashaAnalysisService
    Vimshottari Dasha Calculation
      ‚úì should determine the correct starting Mahadasha lord (6 ms)
      ‚úì should generate the full Mahadasha sequence with correct durations (1 ms)
      ‚úì should generate the correct Antardasha (sub-period) sequence within a Mahadasha
      ‚úì should accurately identify the current Dasha for a given date (1 ms)
    Dasha Analysis Interpretation
      ‚úì should provide a correct interpretation for a Mahadasha period (1 ms)
      ‚úì should provide a correct interpretation for an Antardasha period

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": -90,
      "longitude": 180,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: -90,
      longitude: 180,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    EDGE CASE DEBUG - Response status: 400

      at Object.log (tests/integration/api/analysis.validation.test.js:153:17)

  console.log
    EDGE CASE DEBUG - Response body: {
      success: false,
      error: 'Invalid Astronomical Data',
      message: 'The provided coordinates or date/time are invalid for astrological calculations.',
      details: [
        {
          field: 'coordinates/datetime',
          message: "Failed to generate comprehensive chart: Failed to generate Rasi chart: Failed to calculate Ascendant: Ascendant calculation failed: Swiss Ephemeris calculation failed: Swiss Ephemeris house calculation error: Can't calculate houses.",
          providedValue: [Object]
        }
      ],
      suggestions: [
        'Verify latitude is between -90 and 90.',
        'Verify longitude is between -180 and 180.',
        'Ensure the date and time are valid.'
      ],
      helpText: 'The calculation engine failed. This is often due to coordinates being too close to the poles or an invalid date/time.'
    }

      at Object.log (tests/integration/api/analysis.validation.test.js:154:17)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    Debug generateRelationshipRecommendations:

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1092:17)

  console.log
      - section3 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1093:17)

  console.log
      - section3.houses exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1094:17)

  console.log
      - house7 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1095:17)

  console.log
      - section6 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1096:17)

  console.log
      - navamsaAnalysis exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1097:17)

  console.log
      - house7 has analysis: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1100:19)

  console.log
      - house7 has recommendations: false

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1101:19)

  console.log
      - house7.analysis has recommendations: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1102:19)

  console.log
    Analysis completed successfully

      at log (src/api/routes/comprehensiveAnalysis.js:119:19)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

PASS tests/unit/core/analysis/yogas/GajaKesariYogaCalculator.test.js
  GajaKesariYogaCalculator
    ‚úì should detect Gaja Kesari Yoga when Jupiter is in a quadrant from the Moon
    ‚úì should not detect Gaja Kesari Yoga when Jupiter is not in a quadrant from the Moon
    ‚úì should correctly analyze a chart from the sample birth data
    ‚úì should handle missing planetary data gracefully
    detectGajaKesariYoga
      ‚úì should detect Gaja Kesari Yoga when Jupiter is in the 1st house from the Moon
      ‚úì should detect Gaja Kesari Yoga when Jupiter is in the 4th house from the Moon
      ‚úì should detect Gaja Kesari Yoga when Jupiter is in the 7th house from the Moon
      ‚úì should detect Gaja Kesari Yoga when Jupiter is in the 10th house from the Moon (1 ms)
      ‚úì should NOT detect Gaja Kesari Yoga when Jupiter is in the 2nd house from the Moon
      ‚úì should return gracefully if Jupiter or Moon positions are missing
      ‚úì should handle the 12-house wrap-around correctly (e.g., Moon in Pisces, Jupiter in Gemini)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    Debug generateRelationshipRecommendations:

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1092:17)

  console.log
      - section3 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1093:17)

  console.log
      - section3.houses exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1094:17)

  console.log
      - house7 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1095:17)

  console.log
      - section6 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1096:17)

  console.log
      - navamsaAnalysis exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1097:17)

  console.log
      - house7 has analysis: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1100:19)

  console.log
      - house7 has recommendations: false

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1101:19)

  console.log
      - house7.analysis has recommendations: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1102:19)

  console.log
    Analysis completed successfully

      at log (src/api/routes/comprehensiveAnalysis.js:119:19)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "city": "Pune",
      "country": "India",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

PASS tests/unit/core/analysis/yogas/DhanaYogaCalculator.test.js
  DhanaYogaCalculator
    ‚úì should detect Dhana Yoga when 2nd and 11th lords are conjunct (1 ms)
    ‚úì should detect Dhana Yoga when 2nd and 9th lords exchange houses
    ‚úì should detect Dhana Yoga with multiple benefics in the 2nd house
    ‚úì should not detect Dhana Yoga when wealth lords are not connected
    ‚úì should handle missing chart data gracefully

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, undefined, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685239181687
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:25.896Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

PASS tests/unit/core/analysis/yogas/NeechaBhangaYogaCalculator.test.js
  NeechaBhangaYogaCalculator
    detectNeechaBhangaYogas
      ‚úì should detect Neecha Bhanga when debilitated planet is in a Kendra (1 ms)
      ‚úì should detect Neecha Bhanga when dispositor is in a Kendra from Lagna
      ‚úì should detect Neecha Bhanga when lord of exaltation sign is in a Kendra (11 ms)
      ‚úì should not detect Neecha Bhanga when no cancellation factors are present
      ‚úì should return gracefully if chart data is missing

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

PASS tests/unit/core/analysis/divisional/NavamsaAnalysisService.test.js
  NavamsaAnalysisService
    ‚úì should generate the Navamsa chart correctly for an Aries ascendant (1 ms)
    ‚úì should correctly place a planet in the Navamsa chart
    ‚úì should correctly identify a Vargottama planet
    comparePlanetaryStrength
      ‚úì should correctly identify a Vargottama planet
      ‚úì should correctly identify a planet that is exalted in D9 (1 ms)
    analyzeMarriageIndications
      ‚úì should analyze marriage indications from the Navamsa chart

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

PASS tests/unit/services/ChartGenerationService.test.js
  ChartGenerationService
    generateRasiChart
      ‚úì should generate a Rasi chart with all required components (3 ms)
      ‚úì should throw an error for invalid birth data (10 ms)
    generateNavamsaChart
      ‚úì should generate a Navamsa (D9) chart (1 ms)
    calculateAscendant
      ‚úì should calculate the ascendant correctly
    getPlanetaryPositions
      ‚úì should retrieve planetary positions accurately

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata",
      "city": "Pune",
      "country": "India"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, undefined, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    [dotenv@17.0.1] injecting env (0) from .env ‚Äì [tip] encrypt with dotenvx: https://dotenvx.com

      at _log (node_modules/opencage-api-client/node_modules/dotenv/lib/main.js:102:11)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716852379458544
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:25.936Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

PASS tests/unit/calculations/AscendantCalculator.test.js
  AscendantCalculator
    ‚úì should return the correct ascendant sign for a known birth data (5 ms)
    ‚úì should handle timezones correctly (1 ms)
    ‚úì should handle daylight saving time correctly
    ‚úì should calculate consistent ascendant for Delhi birth data (1 ms)

  console.log
    üåç Geocoding request for: Pune, Maharashtra, India

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:35:13)

  console.log
    üîç Calling OpenCage API...

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:44:15)

PASS tests/unit/calculations/aspects/GrahaDrishtiCalculator.test.js
  GrahaDrishtiCalculator
    ‚úì should calculate the aspects of Mars correctly (1 ms)

PASS tests/unit/rectification/horaChart.test.js
  HoraChartCalculator - NEW MODULE
    New Hora Chart Functionality
      ‚úì should calculate D2-Hora chart correctly for standard birth data (1 ms)
      ‚úì should integrate with existing chart service as additive feature (15 ms)
    Production Safety Tests
      ‚úì should not affect existing chart calculations (1 ms)
      ‚úì should handle edge cases without breaking existing functionality
    BPHS Methodology Compliance
      ‚úì should follow BPHS Chapter 5 specifications for Hora charts (1 ms)
      ‚úì should provide detailed Hora analysis for rectification

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

PASS tests/integration/api/validation_standardization.test.js
  Validation Standardization Integration Tests
    Comprehensive Analysis Endpoint (/api/v1/analysis/comprehensive)
      ‚úì should accept valid birth data with name (name optional after standardization) (106 ms)
      ‚úì should accept birth data without name (standardized - name optional) (13 ms)
      ‚úì should reject incomplete birth data (missing required fields) (2 ms)
      ‚úì should still require essential birth data fields (2 ms)
      ‚úì should provide detailed validation errors for invalid data (2 ms)
    Individual Analysis Endpoints (Houses, Aspects, etc.)
      /api/v1/analysis/birth-data
        ‚úì should accept valid birth data without name (standardized validation) (1 ms)
        ‚úì should accept nested placeOfBirth format without name (2 ms)
        ‚úì should provide user-friendly validation errors (3 ms)
      /api/v1/analysis/preliminary
        ‚úì should accept valid birth data without name (standardized validation) (1 ms)
        ‚úì should accept nested placeOfBirth format without name (2 ms)
        ‚úì should provide user-friendly validation errors (2 ms)
      /api/v1/analysis/houses
        ‚úì should accept valid birth data without name (standardized validation) (3 ms)
        ‚úì should accept nested placeOfBirth format without name (3 ms)
        ‚úì should provide user-friendly validation errors (1 ms)
      /api/v1/analysis/aspects
        ‚úì should accept valid birth data without name (standardized validation) (4 ms)
        ‚úì should accept nested placeOfBirth format without name (3 ms)
        ‚úì should provide user-friendly validation errors (2 ms)
      /api/v1/analysis/arudha
        ‚úì should accept valid birth data without name (standardized validation) (2 ms)
        ‚úì should accept nested placeOfBirth format without name (2 ms)
        ‚úì should provide user-friendly validation errors (3 ms)
      /api/v1/analysis/navamsa
        ‚úì should accept valid birth data without name (standardized validation) (3 ms)
        ‚úì should accept nested placeOfBirth format without name (3 ms)
        ‚úì should provide user-friendly validation errors (1 ms)
    Dasha Analysis Endpoint (Standardized)
      ‚úì should accept both wrapped and direct birth data formats without name (6 ms)
    Chart Generation Endpoints
      ‚úì should accept valid birth data without name for chart generation (15 ms)
      ‚úì should provide standardized validation errors (2 ms)
      ‚úì should reject data with neither coordinates nor place info (2 ms)
      ‚úì should include helpful suggestions for common mistakes (2 ms)
    Error Message Consistency
      ‚úì should provide consistent error structure across all endpoints (7 ms)
    Coordinate Validation Consistency
      ‚úì should consistently validate latitude too high across endpoints (3 ms)
      ‚úì should consistently validate latitude too low across endpoints (3 ms)
      ‚úì should consistently validate longitude too high across endpoints (2 ms)
      ‚úì should consistently validate longitude too low across endpoints (2 ms)
    Time Format Validation
      ‚úì should handle HH:MM format consistently (4 ms)
      ‚úì should handle HH:MM:SS format consistently (3 ms)
      ‚úì should handle invalid time format consistently (1 ms)
      ‚úì should handle non-time string consistently (2 ms)
    Timezone Format Validation
      ‚úì should handle IANA format consistently (3 ms)
      ‚úì should handle UTC offset format consistently (4 ms)
      ‚úì should handle UTC consistently (2 ms)
      ‚úì should handle GMT consistently (4 ms)
      ‚úì should handle invalid timezone consistently (4 ms)
    Missing Required Fields
      ‚úì should consistently require dateOfBirth (1 ms)
      ‚úì should consistently require timeOfBirth (1 ms)
    Location Information Validation
      ‚úì should accept coordinates without place name (2 ms)
      ‚úì should accept place name without coordinates (2 ms)
      ‚úì should reject data with neither coordinates nor place info (1 ms)
  API Documentation Compliance
    ‚úì should provide clear field requirements in error messages (2 ms)

PASS tests/unit/template-matching.test.js
  Template Matching Unit Tests
    House Position Calculations
      ‚úì should calculate correct house position from longitude (1 ms)
      ‚úì should handle longitude wrap around correctly
      ‚úì should return consistent results for same inputs
    Longitude to House Conversion
      ‚úì should convert longitude to correct house number (1 ms)
      ‚úì should handle negative longitudes
      ‚úì should handle longitudes over 360
    Degree Display Formatting
      ‚úì should format degrees correctly
      ‚úì should handle edge cases in degree formatting (1 ms)
    Rashi Number Calculations
      ‚úì should calculate correct rashi numbers
      ‚úì should maintain rashi sequence
    Planet Coordinate Calculations
      ‚úì should calculate planet coordinates within SVG bounds (1 ms)
      ‚úì should return different coordinates for different houses
      ‚úì should handle invalid house numbers gracefully
    House Coordinate System
      ‚úì should generate correct house coordinates for diamond layout
      ‚úì should maintain diamond symmetry (1 ms)
    Template Compliance Validation
      ‚úì should validate required template elements
      ‚úì should reject invalid template data
    Aspect Ratio Calculations
      ‚úì should maintain square aspect ratio
      ‚úì should handle various container sizes (1 ms)
    API Data Mapping
      ‚úì should map API data to chart format correctly
      ‚úì should handle missing API data gracefully
    SVG Path Generation
      ‚úì should generate valid SVG paths for diamond lines
      ‚úì should generate paths within SVG bounds (2 ms)
    Chart Data Validation
      ‚úì should validate complete chart data
      ‚úì should reject invalid chart data (1 ms)
      ‚úì should validate planet data structure
    Error Handling
      ‚úì should handle null inputs gracefully
      ‚úì should handle undefined inputs gracefully
      ‚úì should handle extreme values (1 ms)
    Performance Tests
      ‚úì should calculate house positions efficiently
      ‚úì should format degrees efficiently (1 ms)

PASS tests/system/report_generation.test.js
  System Test: Report Generation Pipeline
    ‚úì should process a full analysis object into a structured report (4 ms)
    ‚úì should handle incomplete chart data gracefully (1 ms)

PASS tests/unit/rectification/praanapada.test.js
  Praanapada Calculator
    ‚úì computes praanapada longitude with sunrise-aware palas (1 ms)

  console.log
    ‚úÖ All 11 critical implementation gaps have been resolved

      at Object.log (tests/integration/gap-resolution-validation.test.js:452:15)

PASS tests/integration/gap-resolution-validation.test.js
  Gap Resolution Validation
    Phase 1: Foundational Architecture Correction
      ‚úì Gap 2.1: Singleton Pattern Implementation (1 ms)
      ‚úì Gap 2.3: Context API Structure Validation (1 ms)
    Phase 2: API Integration and Data Flow
      ‚úì Gap 1.1: API Call Sequencing Logic
      ‚úì Gap 1.2: Comprehensive Analysis Data Structure (1 ms)
      ‚úì Gap 3.1: Chart Data Processing Structure (1 ms)
      ‚úì Gap 3.2: House Position Calculation
    Phase 3: UI, Performance, Cultural Integration
      ‚úì Gap 2.2: Cultural Design System (1 ms)
      ‚úì Gap 4.1: Progressive Loading Implementation (1 ms)
      ‚úì Gap 4.2: Error Boundaries Implementation
      ‚úì Gap 6.1 & 6.2: Sanskrit Integration (1 ms)
    Phase 4: Testing and Data Validation
      ‚úì API Response Schema Validation (1 ms)
      ‚úì Chart Generation Response Schema
      ‚úì Component Integration Validation (1 ms)
      ‚úì Final Error-Free Validation (1 ms)
    Comprehensive System Integration
      ‚úì End-to-End Data Flow Validation (1 ms)
      ‚úì All Critical Gaps Resolution Summary (3 ms)

PASS tests/unit/calculations/ExaltationDebilitationCalculator.test.js
  ExaltationDebilitationCalculator
    Dignity for Sun
      ‚úì should identify exaltation point
      ‚úì should identify debilitation point (1 ms)
      ‚úì should identify Moolatrikona sign
      ‚úì should identify Own Sign
    Dignity for Moon
      ‚úì should identify exaltation point (1 ms)
      ‚úì should identify debilitation point
      ‚úì should identify Moolatrikona sign
      ‚úì should identify Own Sign
    Dignity for Mars
      ‚úì should identify exaltation point
      ‚úì should identify debilitation point (1 ms)
      ‚úì should identify Moolatrikona sign
      ‚úì should identify Own Sign
    Dignity for Mercury
      ‚úì should identify exaltation point
      ‚úì should identify debilitation point
      ‚úì should identify Moolatrikona sign (1 ms)
      ‚úì should identify Own Sign
    Dignity for Jupiter
      ‚úì should identify exaltation point
      ‚úì should identify debilitation point
      ‚úì should identify Moolatrikona sign
      ‚úì should identify Own Sign
    Dignity for Venus
      ‚úì should identify exaltation point
      ‚úì should identify debilitation point (1 ms)
      ‚úì should identify Moolatrikona sign
      ‚úì should identify Own Sign
    Dignity for Saturn
      ‚úì should identify exaltation point
      ‚úì should identify debilitation point (1 ms)
      ‚úì should identify Moolatrikona sign
      ‚úì should identify Own Sign
    Friendship Status
      ‚úì should identify great friend status
      ‚úì should identify friend status
      ‚úì should identify neutral status (1 ms)
      ‚úì should identify enemy status
      ‚úì should identify bitter enemy status
    getDignity
      ‚úì should correctly identify an exalted planet (1 ms)
      ‚úì should correctly identify a planet in Deep Exaltation
      ‚úì should correctly identify a debilitated planet (1 ms)
      ‚úì should correctly identify a planet in Deep Debilitation
      ‚úì should correctly identify Rahu and Ketu dignity (1 ms)
      ‚úì should identify a neutral planet correctly
      ‚úì should identify an enemy planet correctly (1 ms)
    analyzeChartDignity
      ‚úì should correctly analyze the dignities for an entire chart

PASS tests/unit/core/analysis/yogas/PanchMahapurushaYogaCalculator.test.js
  PanchMahapurushaYogaCalculator
    detectPanchMahapurushaYogas
      ‚úì should detect Ruchaka Yoga (Mars) (1 ms)
      ‚úì should detect Bhadra Yoga (Mercury) (1 ms)
      ‚úì should detect Hamsa Yoga (Jupiter)
      ‚úì should detect Malavya Yoga (Venus)
      ‚úì should detect Sasha Yoga (Saturn) (1 ms)
      ‚úì should detect multiple Panch Mahapurusha Yogas in a single chart
      ‚úì should not detect a yoga if the planet is not in a Kendra
      ‚úì should return gracefully if chart data is missing

PASS tests/unit/services/analysis/ArudhaAnalysisService.test.js
  ArudhaAnalysisService
    Arudha Pada Calculation
      ‚úì should correctly calculate the Arudha Lagna (A1) (1 ms)
      ‚úì should correctly apply the exception rule for Arudha Lagna (if it falls in 1st or 7th) (1 ms)
      ‚úì should calculate the Arudha Pada for other houses (e.g., A10)
    Arudha Lagna Analysis
      ‚úì should analyze the influence of planets on the Arudha Lagna (1 ms)
      ‚úì should analyze the houses 2nd and 12th from Arudha Lagna (3 ms)
      ‚úì should interpret the contrast between true Lagna and Arudha Lagna

PASS tests/unit/rectification/gulika.test.js
  Gulika Calculator
    ‚úì computes gulika longitude and time for Mumbai sample (1 ms)

PASS tests/unit/core/analysis/divisional/VargottamaDetector.test.js
  VargottamaDetector
    ‚úì should detect a Vargottama planet correctly
    ‚úì should not detect a Vargottama planet when signs are different (1 ms)
    ‚úì should handle charts with no planets

PASS tests/integration/backward-compatibility.test.js
  Backward Compatibility Integration
    Existing Client Integration Compatibility
      ‚úì should support all existing client request formats (234 ms)
      ‚úì should maintain existing authentication and authorization (59 ms)
      ‚úì should preserve existing rate limiting constraints (23 ms)
    Database Schema Backward Compatibility
      ‚úì should not break existing database queries (2 ms)
      ‚úì should support all existing query patterns (2 ms)
    Response Format Backward Compatibility
      ‚úì should maintain exact JSON response structure for existing endpoints (78 ms)
      ‚úì should preserve existing error response formats (25 ms)
    Performance Backward Compatibility
      ‚úì should maintain existing response time characteristics (3 ms)
      ‚úì should maintain existing memory usage patterns (239 ms)
    Feature Flag Independence
      ‚úì should work identically with all new features disabled (72 ms)

PASS tests/unit/core/analysis/houses/HouseAnalysisService.test.js
  HouseAnalysisService
    analyzeHouse
      ‚úì should correctly analyze a house with a planet in it (23 ms)
      ‚úì should correctly analyze an empty house (1 ms)
    analyzeAllHouses
      ‚úì should analyze all 12 houses (1 ms)
    determineFunctionalNatures
      ‚úì should determine functional natures for Aries ascendant (1 ms)

PASS tests/unit/core/analysis/yogas/ViparitaRajaYogaCalculator.test.js
  ViparitaRajaYogaCalculator
    detectViparitaRajaYogas
      ‚úì should detect Harsha Yoga (6th and 8th lord exchange) (6 ms)
      ‚úì should detect Sarala Yoga (6th and 12th lord exchange)
      ‚úì should detect Vimala Yoga (8th and 12th lord exchange)
      ‚úì should not detect a yoga if no exchange between dusthana lords occurs
      ‚úì should return gracefully if chart data is missing

PASS tests/unit/services/analysis/LuminariesAnalysisService.test.js
  LuminariesAnalysisService
    ‚úì should perform a basic analysis of the Sun and Moon (1 ms)

PASS tests/unit/services/analysis/BirthDataAnalysisService.test.js
  BirthDataAnalysisService
    ‚úì should analyze birth details (1 ms)
    ‚úì should analyze chart generation
    ‚úì should analyze the ascendant
    ‚úì should analyze planetary positions (1 ms)
    ‚úì should analyze the Mahadasha (1 ms)

PASS tests/unit/api/ComprehensiveAnalysisController.test.js
  ComprehensiveAnalysisController
    ‚úì should exist as a placeholder for future tests

PASS tests/unit/reports/synthesis/AnalysisSynthesizer.test.js
  AnalysisSynthesizer
    ‚úì should synthesize analysis results (1 ms)

PASS tests/unit/core/analysis/aspects/AspectAnalysisService.test.js
  AspectAnalysisService
    Aspect Detection
      ‚úì should identify standard 7th house aspects
      ‚úì should identify Mars special aspects (4th and 8th)
      ‚úì should identify Jupiter special aspects (5th and 9th)
      ‚úì should identify Saturn special aspects (3rd and 10th) (1 ms)
    Aspect Analysis
      ‚úì should analyze the effect of a benefic aspect
      ‚úì should analyze the effect of a malefic aspect
    Comprehensive Analysis
      ‚úì should provide a full aspect analysis for a specific planet
      ‚úì should provide a full aspect analysis for a specific house

PASS tests/unit/core/analysis/yogas/RajaYogaCalculator.test.js
  RajaYogaCalculator
    ‚úì should detect Raja Yoga when a Kendra and Trikona lord are conjunct
    ‚úì should detect Raja Yoga when a Kendra and Trikona lord have a mutual aspect
    ‚úì should detect Raja Yoga by exchange between Kendra and Trikona lords
    ‚úì should not detect Raja Yoga when there is no connection between Kendra and Trikona lords (1 ms)
    ‚úì should handle missing chart data gracefully
    Helper Methods
      ‚úì should correctly identify Kendra lords for a given Lagna
      ‚úì should correctly identify Trikona lords for a given Lagna
      ‚úì should determine conjunction correctly
      ‚úì should determine mutual aspect correctly
      ‚úì should determine Parivartana correctly
      ‚úì should calculate yoga strength correctly

  console.log
    Chart with D3: {
      ascendant: { sign: 'Aries', degree: 15, longitude: 15 },
      planets: [
        {
          name: 'Sun',
          sign: 'Aries',
          degree: 10,
          house: 1,
          longitude: 10,
          isRetrograde: false,
          dignity: 'neutral'
        }
      ],
      rasiChart: {
        ascendant: { sign: 'Aries', degree: 15, longitude: 15 },
        planets: [ [Object] ]
      },
      birthData: {
        name: 'Test User',
        dateOfBirth: '1990-01-01',
        timeOfBirth: '12:00',
        latitude: 19.076,
        longitude: 72.8777,
        timezone: 'Asia/Kolkata'
      },
      d9: { planets: [ [Object] ] }
    }

      at Object.log (tests/unit/PlanetaryStrengthCalculator.test.js:146:15)

PASS tests/unit/PlanetaryStrengthCalculator.test.js
  PlanetaryStrengthCalculator
    Naisargika Bala (Intrinsic Strength)
      ‚úì should return correct Naisargika Bala for each planet (1 ms)
      ‚úì should return 0 for an unknown planet
    Dignity Calculation
      ‚úì should correctly identify exalted planets
      ‚úì should correctly identify debilitated planets
      ‚úì should correctly identify planets in their own sign
      ‚úì should correctly identify planets in their Moolatrikona
    Sthana Bala (Positional Strength)
      ‚úì should calculate Uchcha Bala for exalted planets (1 ms)
      ‚úì should calculate Kendradi Bala
      ‚úì should calculate Saptavargaja Bala based on divisional chart dignities
      ‚úì should calculate Ojhajugmarasi Bala
      ‚úì should calculate Drekkana Bala (3 ms)
    Dig Bala (Directional Strength)
      ‚úì should give maximum strength for Jupiter in 1st house
      ‚úì should give minimum strength for Jupiter in 7th house
      ‚úì should give maximum strength for Sun in 10th house
    Kala Bala (Temporal Strength)
      ‚úì should calculate Nathonatha Bala based on birth time
      ‚úì should calculate Paksha Bala based on lunar phase
      ‚úì should calculate Thribhaga Bala
      ‚úì should calculate Varsha/Masa/Vara Bala
      ‚úì should calculate Hora Bala
      ‚úì should calculate Ayana Bala based on declination
    Chesta Bala (Motional Strength)
      ‚úì should calculate correct Chesta Bala for retrograde planets
      ‚úì should calculate correct Chesta Bala for planets in direct motion
    Drik Bala (Aspectual Strength)
      ‚úì should calculate positive Drik Bala from benefic aspects (1 ms)
      ‚úì should calculate negative Drik Bala from malefic aspects
    Shad Bala Total
      ‚úé todo should return the correct total Shad Bala and compare with required minimum
    Vargottama Status
      ‚úì should return true for a Vargottama planet
      ‚úì should return false for a non-Vargottama planet

  console.log
    üîç BirthDataForm: Debounced geocoding triggered for: Pune, India

      at log (client/src/components/forms/BirthDataForm.js:100:17)

  console.log
    üîç BirthDataForm: Debounced geocoding triggered for: Invalid Location

      at log (client/src/components/forms/BirthDataForm.js:100:17)

  console.log
    üì° OpenCage API response structure: { hasResults: true, resultsLength: 2 }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:47:15)

  console.log
    ‚úÖ Geocoding successful: {
      lat: 18.5213738,
      lng: 73.8545071,
      timezone: 'Asia/Kolkata',
      formatted: 'Pune, Pune District, India'
    }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:57:17)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "placeOfBirth": "Pune, Maharashtra, India",
      "latitude": 18.5213738,
      "longitude": 73.8545071,
      "timezone": "Asia/Kolkata",
      "service_used": "opencage",
      "accuracy": "high",
      "formatted_address": "Pune, Pune District, India"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5213738,
      longitude: 73.8545071,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, Maharashtra, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.3383777922265487,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.338377792226538
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716851781187387
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:27.824Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685177833548
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:27.832Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685177611731
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:27.839Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "UTC"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 86.67638401634669,
        sign: 'Gemini',
        signId: 3,
        signIndex: 2,
        degree: 26.676384016346674
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 86.66666666666667,
        sign: 'Gemini',
        signId: 3,
        degree: 26.666666666666668,
        rasiSign: 'Gemini',
        rasiSignId: 3
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716851773265404
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:27.848Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "GMT"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 86.67638401634669,
        sign: 'Gemini',
        signId: 3,
        signIndex: 2,
        degree: 26.676384016346674
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 86.66666666666667,
        sign: 'Gemini',
        signId: 3,
        degree: 26.666666666666668,
        rasiSign: 'Gemini',
        rasiSignId: 3
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716851771997867
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:27.852Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "name": "Test Person",
      "dateOfBirth": "1800-01-01T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "placeOfBirth": {
        "name": "Pune, Maharashtra, India",
        "latitude": 18.5204,
        "longitude": 73.8567,
        "timezone": "Asia/Kolkata"
      },
      "latitude": 18.5204,
      "longitude": 73.8567
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, Maharashtra, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 273.0235562847327,
        sign: 'Capricorn',
        signId: 10,
        signIndex: 9,
        degree: 3.023556284732649
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 270,
        sign: 'Capricorn',
        signId: 10,
        degree: 0,
        rasiSign: 'Capricorn',
        rasiSignId: 10
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Jupiter',
      currentDasha: {
        planet: 'Rahu',
        startAge: 222,
        endAge: 240,
        period: 18,
        remainingYears: 14.175244383032918
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:27.858Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "name": "Test Person",
      "dateOfBirth": "2100-12-31T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "placeOfBirth": {
        "name": "Pune, Maharashtra, India",
        "latitude": 18.5204,
        "longitude": 73.8567,
        "timezone": "Asia/Kolkata"
      },
      "latitude": 18.5204,
      "longitude": 73.8567
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, Maharashtra, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 273.9614429929806,
        sign: 'Capricorn',
        signId: 10,
        signIndex: 9,
        degree: 3.9614429929806647
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 303.3333333333333,
        sign: 'Aquarius',
        signId: 11,
        degree: 3.3333333333333335,
        rasiSign: 'Capricorn',
        rasiSignId: 10
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: { birthDasha: 'Venus', currentDasha: null }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:27.863Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üåç Geocoding request for: {
      name: 'Pune, Maharashtra, India',
      latitude: 18.5204,
      longitude: 73.8567,
      timezone: 'Asia/Kolkata'
    }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:35:13)

  console.log
    üîç Calling OpenCage API...

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:44:15)

  console.log
    üì° OpenCage API response structure: { hasResults: true, resultsLength: 10 }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:47:15)

  console.log
    ‚úÖ Geocoding successful: {
      lat: 52.7803198,
      lng: 13.5427057,
      timezone: 'Europe/Berlin',
      formatted: 'Object 17/5001 Primary control center for the East German National Defence Council, √útzdorfer Weg, 16348 Lanke, Germany'
    }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:57:17)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "name": "Test Person",
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "placeOfBirth": {
        "name": "Pune, Maharashtra, India",
        "latitude": 18.5204,
        "longitude": 73.8567,
        "timezone": "Asia/Kolkata"
      },
      "latitude": 52.7803198,
      "longitude": 13.5427057,
      "timezone": "Europe/Berlin",
      "service_used": "opencage",
      "accuracy": "high",
      "formatted_address": "Object 17/5001 Primary control center for the East German National Defence Council, √útzdorfer Weg, 16348 Lanke, Germany"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 52.7803198,
      longitude: 13.5427057,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, Maharashtra, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 36.29927459476122,
        sign: 'Taurus',
        signId: 2,
        signIndex: 1,
        degree: 6.299274594761243
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 303.3333333333333,
        sign: 'Aquarius',
        signId: 11,
        degree: 3.3333333333333335,
        rasiSign: 'Taurus',
        rasiSignId: 2
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685151659186
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:28.659Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üåç Geocoding request for: {
      name: 'Pune, Maharashtra, India',
      latitude: 18.5204,
      longitude: 73.8567,
      timezone: 'Asia/Kolkata'
    }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:35:13)

  console.log
    üîç Calling OpenCage API...

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:44:15)

  console.log
    üîç BirthDataForm: Debounced geocoding triggered for: Pune, India

      at log (client/src/components/forms/BirthDataForm.js:100:17)

  console.log
    üì° OpenCage API response structure: { hasResults: true, resultsLength: 10 }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:47:15)

  console.log
    ‚úÖ Geocoding successful: {
      lat: 52.7803198,
      lng: 13.5427057,
      timezone: 'Europe/Berlin',
      formatted: 'Object 17/5001 Primary control center for the East German National Defence Council, √útzdorfer Weg, 16348 Lanke, Germany'
    }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:57:17)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "name": "Test Person",
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "placeOfBirth": {
        "name": "Pune, Maharashtra, India",
        "latitude": 18.5204,
        "longitude": 73.8567,
        "timezone": "Asia/Kolkata"
      },
      "latitude": 52.7803198,
      "longitude": 13.5427057,
      "timezone": "Europe/Berlin",
      "service_used": "opencage",
      "accuracy": "high",
      "formatted_address": "Object 17/5001 Primary control center for the East German National Defence Council, √útzdorfer Weg, 16348 Lanke, Germany"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 52.7803198,
      longitude: 13.5427057,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, Maharashtra, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 36.29927459476122,
        sign: 'Taurus',
        signId: 2,
        signIndex: 1,
        degree: 6.299274594761243
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 303.3333333333333,
        sign: 'Aquarius',
        signId: 11,
        degree: 3.3333333333333335,
        rasiSign: 'Taurus',
        rasiSignId: 2
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.37168512538976
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:29.487Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üåç Geocoding request for: {
      name: 'Pune, Maharashtra, India',
      latitude: 18.5204,
      longitude: 73.8567,
      timezone: 'Asia/Kolkata'
    }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:35:13)

  console.log
    üîç Calling OpenCage API...

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:44:15)

  console.log
    üîç BirthDataForm: Debounced geocoding triggered for: Pune, India

      at log (client/src/components/forms/BirthDataForm.js:100:17)

  console.log
    üì° OpenCage API response structure: { hasResults: true, resultsLength: 10 }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:47:15)

  console.log
    ‚úÖ Geocoding successful: {
      lat: 52.7803198,
      lng: 13.5427057,
      timezone: 'Europe/Berlin',
      formatted: 'Object 17/5001 Primary control center for the East German National Defence Council, √útzdorfer Weg, 16348 Lanke, Germany'
    }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:57:17)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "name": "Test Person",
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "placeOfBirth": {
        "name": "Pune, Maharashtra, India",
        "latitude": 18.5204,
        "longitude": 73.8567,
        "timezone": "Asia/Kolkata"
      },
      "longitude": 13.5427057,
      "latitude": 52.7803198,
      "timezone": "Europe/Berlin",
      "service_used": "opencage",
      "accuracy": "high",
      "formatted_address": "Object 17/5001 Primary control center for the East German National Defence Council, √útzdorfer Weg, 16348 Lanke, Germany"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 52.7803198,
      longitude: 13.5427057,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, Maharashtra, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 36.29927459476122,
        sign: 'Taurus',
        signId: 2,
        signIndex: 1,
        degree: 6.299274594761243
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 303.3333333333333,
        sign: 'Aquarius',
        signId: 11,
        degree: 3.3333333333333335,
        rasiSign: 'Taurus',
        rasiSignId: 2
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716851072641774
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.060Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üåç Geocoding request for: {
      name: 'Pune, Maharashtra, India',
      latitude: 18.5204,
      longitude: 73.8567,
      timezone: 'Asia/Kolkata'
    }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:35:13)

  console.log
    üîç Calling OpenCage API...

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:44:15)

  console.log
    üîç BirthDataForm: Generate Chart button clicked

      at log (client/src/components/forms/BirthDataForm.js:497:23)

  console.log
    üîç BirthDataForm: Current state: {
      loading: false,
      geocoding: false,
      formData: {
        name: 'Test User',
        dateOfBirth: '1985-10-24',
        timeOfBirth: '14:30',
        placeOfBirth: 'Pune, India',
        gender: 'male'
      },
      coordinates: { latitude: 18.5204, longitude: 73.8567, timezone: 'Asia/Kolkata' },
      errors: { placeOfBirth: null }
    }

      at log (client/src/components/forms/BirthDataForm.js:498:23)

  console.log
    üîç BirthDataForm: Button should submit - enabled state

      at log (client/src/components/forms/BirthDataForm.js:508:25)

  console.log
    üîÑ BirthDataForm: handleSubmit called

      at log (client/src/components/forms/BirthDataForm.js:139:13)

  console.log
    üöÄ BirthDataForm: Calling onSubmit with requestBody: {
      apiRequest: {
        name: 'Test User',
        dateOfBirth: '1985-10-24',
        timeOfBirth: '14:30',
        placeOfBirth: 'Pune, India',
        gender: 'male',
        latitude: 18.5204,
        longitude: 73.8567,
        timezone: 'Asia/Kolkata',
        formatted: true
      },
      metadata: {},
      formatted: true
    }

      at log (client/src/components/forms/BirthDataForm.js:194:15)

  console.log
    ‚úÖ BirthDataForm: onSubmit completed successfully

      at log (client/src/components/forms/BirthDataForm.js:198:17)

  console.log
    üîç BirthDataForm: Generate Chart button clicked

      at log (client/src/components/forms/BirthDataForm.js:497:23)

  console.log
    üîç BirthDataForm: Current state: {
      loading: false,
      geocoding: false,
      formData: {
        name: 'Test User',
        dateOfBirth: '1990-01-01',
        timeOfBirth: '12:00',
        placeOfBirth: 'Pune',
        gender: 'prefer_not_to_say'
      },
      coordinates: { latitude: 18.5204, longitude: 73.8567, timezone: 'Asia/Kolkata' },
      errors: {}
    }

      at log (client/src/components/forms/BirthDataForm.js:498:23)

  console.log
    üîç BirthDataForm: Button should submit - enabled state

      at log (client/src/components/forms/BirthDataForm.js:508:25)

  console.log
    üîÑ BirthDataForm: handleSubmit called

      at log (client/src/components/forms/BirthDataForm.js:139:13)

PASS tests/ui/BirthDataForm.test.js (5.48 s)
  BirthDataForm
    ‚úì renders all form fields correctly (29 ms)
    ‚úì shows optional label for name field (4 ms)
    ‚úì shows required asterisk for required fields (8 ms)
    ‚úì calls geocoding service when place of birth is entered (1142 ms)
    ‚úì shows error when geocoding fails (1074 ms)
    ‚úì disables submit button when coordinates are not available (25 ms)
    ‚úì enables submit button when all required fields are filled and coordinates are available (1106 ms)
    ‚úì submits form with correct data (1194 ms)
    ‚úì clears form when clear button is clicked (81 ms)
    ‚úì loads saved session data on mount (5 ms)
    ‚úì handles validation errors correctly (19 ms)

  console.log
    üì° OpenCage API response structure: { hasResults: true, resultsLength: 10 }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:47:15)

  console.log
    ‚úÖ Geocoding successful: {
      lat: 52.7803198,
      lng: 13.5427057,
      timezone: 'Europe/Berlin',
      formatted: 'Object 17/5001 Primary control center for the East German National Defence Council, √útzdorfer Weg, 16348 Lanke, Germany'
    }

      at GeocodingService.log [as geocodeLocation] (src/services/geocoding/GeocodingService.js:57:17)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "name": "Test Person",
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "placeOfBirth": {
        "name": "Pune, Maharashtra, India",
        "latitude": 18.5204,
        "longitude": 73.8567,
        "timezone": "Asia/Kolkata"
      },
      "longitude": 13.5427057,
      "latitude": 52.7803198,
      "timezone": "Europe/Berlin",
      "service_used": "opencage",
      "accuracy": "high",
      "formatted_address": "Object 17/5001 Primary control center for the East German National Defence Council, √útzdorfer Weg, 16348 Lanke, Germany"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 52.7803198,
      longitude: 13.5427057,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'Pune, Maharashtra, India'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 36.29927459476122,
        sign: 'Taurus',
        signId: 2,
        signIndex: 1,
        degree: 6.299274594761243
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 303.3333333333333,
        sign: 'Aquarius',
        signId: 11,
        degree: 3.3333333333333335,
        rasiSign: 'Taurus',
        rasiSignId: 2
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850900575466
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.603Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850896772854
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.614Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30:00",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685089423785
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.623Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "20:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 177.20532992724273,
        sign: 'Virgo',
        signId: 6,
        signIndex: 5,
        degree: 27.2053299272427
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 176.66666666666666,
        sign: 'Virgo',
        signId: 6,
        degree: 26.666666666666668,
        rasiSign: 'Virgo',
        rasiSignId: 6
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850891069043
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.633Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "00:00",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 224.1712109177517,
        sign: 'Scorpio',
        signId: 8,
        signIndex: 7,
        degree: 14.17121091775175
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 223.33333333333334,
        sign: 'Scorpio',
        signId: 8,
        degree: 13.333333333333334,
        rasiSign: 'Scorpio',
        rasiSignId: 8
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Ketu',
      currentDasha: {
        planet: 'Moon',
        startAge: 33,
        endAge: 43,
        period: 10,
        remainingYears: 2.3716850888217067
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.641Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "23:59",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 224.8246897245433,
        sign: 'Scorpio',
        signId: 8,
        signIndex: 7,
        degree: 14.824689724543305
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 223.33333333333334,
        sign: 'Scorpio',
        signId: 8,
        degree: 13.333333333333334,
        rasiSign: 'Scorpio',
        rasiSignId: 8
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850886315797
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.648Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850879027547
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.670Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685087807691
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.674Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850876809374
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.677Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850875541837
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.681Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850874908104
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.684Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685087395747
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.687Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850873006834
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.690Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.37168508720562
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.693Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.371685087078866
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.696Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    üöÄ CHART GENERATION SERVICE - Starting comprehensive chart generation...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:51:13)

  console.log
    üìä Input Birth Data: {
      "dateOfBirth": "1985-03-15T00:00:00.000Z",
      "timeOfBirth": "08:30",
      "latitude": 18.5204,
      "longitude": 73.8567,
      "timezone": "Asia/Kolkata"
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:52:13)

  console.log
    üîç Step 1: Validating birth data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:56:15)

  console.log
    ‚úÖ Birth data validation passed

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:61:15)

  console.log
    üîç Step 2: Processing location data...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:64:15)

  console.log
    ‚úÖ Location data processed: {
      latitude: 18.5204,
      longitude: 73.8567,
      geocodingInfo: {
        service: 'user_provided',
        accuracy: 'high',
        formattedAddress: 'undefined, undefined, undefined'
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:66:15)

  console.log
    üîç Step 3: Generating Rasi chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:73:15)

  console.log
    ‚úÖ Rasi chart generated: {
      ascendant: {
        longitude: 3.340799323766973,
        sign: 'Aries',
        signId: 1,
        signIndex: 0,
        degree: 3.340799323766987
      },
      planetsCount: 9,
      housesCount: 12
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:75:15)

  console.log
    üîç Step 4: Generating Navamsa chart...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:82:15)

  console.log
    ‚úÖ Navamsa chart generated: {
      ascendant: {
        longitude: 33.333333333333336,
        sign: 'Taurus',
        signId: 2,
        degree: 3.3333333333333335,
        rasiSign: 'Aries',
        rasiSignId: 1
      },
      planetsCount: 9
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:84:15)

  console.log
    üîç Step 5: Calculating Dasha information...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:90:15)

  console.log
    ‚úÖ Dasha info calculated: {
      birthDasha: 'Venus',
      currentDasha: {
        planet: 'Mars',
        startAge: 36,
        endAge: 43,
        period: 7,
        remainingYears: 2.3716850869838026
      }
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:92:15)

  console.log
    üîç Step 6: Generating comprehensive analysis...

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:98:15)

  console.log
    ‚úÖ Analysis generated: [
      'personality',
      'health',
      'career',
      'relationships',
      'finances',
      'spirituality',
      'timing'
    ]

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:100:15)

  console.log
    üéâ CHART GENERATION SERVICE - Comprehensive chart generation completed successfully!

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:111:15)

  console.log
    üìà Result structure: {
      hasBirthData: true,
      hasRasiChart: true,
      hasNavamsaChart: true,
      hasDashaInfo: true,
      hasAnalysis: true,
      generatedAt: '2025-10-30T11:48:30.699Z'
    }

      at ChartGenerationService.log [as generateComprehensiveChart] (src/services/chart/ChartGenerationService.js:112:15)

  console.log
    Starting comprehensive analysis...

      at log (src/api/routes/comprehensiveAnalysis.js:77:15)

  console.log
    üî∏ Generating Section 6: Navamsa Analysis (D9)

      at MasterAnalysisOrchestrator.log [as executeSection6Analysis] (src/services/analysis/MasterAnalysisOrchestrator.js:386:15)

  console.log
    Debug generateRelationshipRecommendations:

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1092:17)

  console.log
      - section3 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1093:17)

  console.log
      - section3.houses exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1094:17)

  console.log
      - house7 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1095:17)

  console.log
      - section6 exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1096:17)

  console.log
      - navamsaAnalysis exists: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1097:17)

  console.log
      - house7 has analysis: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1100:19)

  console.log
      - house7 has recommendations: false

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1101:19)

  console.log
      - house7.analysis has recommendations: true

      at MasterAnalysisOrchestrator.log [as generateRelationshipRecommendations] (src/services/analysis/MasterAnalysisOrchestrator.js:1102:19)

  console.log
    Analysis completed successfully

      at log (src/api/routes/comprehensiveAnalysis.js:119:19)

PASS tests/integration/api/analysis.validation.test.js (5.939 s)
  API Validation Integration Tests
    Chart Generation Endpoints
      POST /api/v1/chart/generate
        ‚úì should accept valid chart data without name field (99 ms)
        ‚úì should accept valid chart data with optional name field (13 ms)
        ‚úì should handle nested placeOfBirth format (9 ms)
        ‚úì should reject invalid date format (3 ms)
        ‚úì should reject invalid time format (3 ms)
        ‚úì should reject invalid coordinates (1 ms)
        ‚úì should validate edge case coordinates (10 ms)
    Analysis Endpoints (Standardized Validation - Name Optional)
      POST /v1/analysis/comprehensive
        ‚úì should accept valid comprehensive analysis data with name (18 ms)
        ‚úì should accept comprehensive analysis data without name (standardized) (8 ms)
        ‚úì should handle chartId alternative format (2 ms)
        ‚úì should reject empty birthData and missing chartId (2 ms)
      POST /v1/analysis/houses
        ‚úì should accept valid house analysis data with name (8 ms)
        ‚úì should accept house analysis data without name (standardized) (4 ms)
        ‚úì should provide user-friendly error messages for invalid data (3 ms)
      POST /v1/analysis/aspects
        ‚úì should accept valid aspect analysis data with name (3 ms)
        ‚úì should accept aspect analysis data without name (standardized) (2 ms)
      POST /v1/analysis/arudha
        ‚úì should accept valid arudha analysis data with name (3 ms)
        ‚úì should accept arudha analysis data without name (standardized) (3 ms)
      POST /v1/analysis/navamsa
        ‚úì should accept valid navamsa analysis data with name (3 ms)
        ‚úì should accept navamsa analysis data without name (standardized) (3 ms)
      POST /v1/analysis/dasha
        ‚úì should accept valid dasha analysis data with name (3 ms)
        ‚úì should handle wrapped birthData format (3 ms)
        ‚úì should accept dasha analysis data without name (standardized) (2 ms)
    Birth Data Validation Endpoint (Name Optional)
      POST /api/v1/analysis/birth-data
        ‚úì should accept valid birth data without name (1 ms)
        ‚úì should accept valid birth data with name (1 ms)
        ‚úì should validate required fields (excluding name) (1 ms)
    Edge Cases and Data Format Variations
      ‚úì should handle multiple location formats (1898 ms)
      ‚úì should validate timezone formats (27 ms)
      ‚úì should validate date range boundaries (12 ms)
      ‚úì should validate coordinate boundaries (2740 ms)
      ‚úì should handle time format variations (49 ms)
    Error Message Quality
      ‚úì should provide comprehensive error details (2 ms)
      ‚úì should provide context-specific help text (4 ms)
      ‚úì should provide suggestions for common errors (1 ms)
    Unit Tests for Validation Functions
      validateBirthData
        ‚úì should validate birth data correctly
        ‚úì should catch validation errors
      validateChartRequest
        ‚úì should validate chart request without name requirement
      Analysis validators
        validateHouseAnalysis
          ‚úì should accept data without name field (standardized)
          ‚úì should accept valid data with name
          ‚úì should reject invalid birth data regardless of name presence
        validateAspectAnalysis
          ‚úì should accept data without name field (standardized)
          ‚úì should accept valid data with name
          ‚úì should reject invalid birth data regardless of name presence
        validateArudhaAnalysis
          ‚úì should accept data without name field (standardized)
          ‚úì should accept valid data with name (1 ms)
          ‚úì should reject invalid birth data regardless of name presence
        validateNavamsaAnalysis
          ‚úì should accept data without name field (standardized)
          ‚úì should accept valid data with name (1 ms)
          ‚úì should reject invalid birth data regardless of name presence
        validateDashaAnalysis
          ‚úì should accept data without name field (standardized)
          ‚úì should accept valid data with name
          ‚úì should reject invalid birth data regardless of name presence
      validateBirthDataValidation
        ‚úì should not require name field
    Performance and Load Testing
      ‚úì should handle multiple concurrent requests (37 ms)
      ‚úì should respond within reasonable time limits (8 ms)

Test Suites: 42 passed, 42 total
Tests:       1 todo, 584 passed, 585 total
Snapshots:   0 total
Time:        6.327 s, estimated 7 s
Ran all test suites.
